name: Continuous Deployment

# Ce workflow construit et publie les images Docker (backend + frontend),
# puis déploie les manifests Kubernetes situés dans le dossier k8s/.
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      environment:
        description: "Nom de l'environnement à déployer (ex: staging, production)"
        required: true
        default: "staging"

env:
  # Registry cible. Adapter à votre contexte (Docker Hub, ECR, etc.).
  REGISTRY: ghcr.io
  # Nom d'organisation / namespace du registre. Ex: ghcr.io/mon-compte.
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  BACKEND_IMAGE_NAME: recipes-backend
  FRONTEND_IMAGE_NAME: recipes-frontend

jobs:
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    # Permet d'associer le déploiement à un environnement GitHub pour la traçabilité.
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: 🛎️ Checkout du dépôt
        uses: actions/checkout@v4

      - name: 🔧 Préparation de Docker Buildx
        # Buildx permet de construire des images optimisées et multiplateformes.
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Connexion au registre de conteneurs
        # Authentifie l'action pour pouvoir pousser les images.
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: 🏷️ Calcul du tag d'image
        id: version
        # Utilise le tag Git si présent ; sinon, génère un hash court du commit.
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            echo "value=${TAG}" >> "$GITHUB_OUTPUT"
          else
            echo "value=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          fi

      - name: 🧱 Build & Push backend
        # Construit l'image FastAPI et la pousse avec le tag calculé.
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.BACKEND_IMAGE_NAME }}:${{ steps.version.outputs.value }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.BACKEND_IMAGE_NAME }}:latest

      - name: 🧱 Build & Push frontend
        # Construit l'image React. Adapter la commande si un build statique est préféré.
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.version.outputs.value }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.FRONTEND_IMAGE_NAME }}:latest

      - name: ☸️ Installation de kubectl
        uses: azure/setup-kubectl@v4

      - name: 🗂️ Configuration de l'accès cluster
        # Récupère le kubeconfig encodé en base64 depuis les secrets GitHub.
        run: |
          mkdir -p "$HOME/.kube"
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"

      - name: 📦 Application des manifests Kubernetes
        # Applique le namespace, ConfigMaps, Secrets, Deployments, Services, Ingress…
        run: kubectl apply -k k8s

      - name: 🔄 Mise à jour des images déployées
        # Force les Deployments à utiliser les nouvelles images taguées.
        run: |
          BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.BACKEND_IMAGE_NAME }}:${{ steps.version.outputs.value }}"
          FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.version.outputs.value }}"
          kubectl set image deployment/backend backend="$BACKEND_IMAGE" -n recipes-app
          kubectl set image deployment/frontend frontend="$FRONTEND_IMAGE" -n recipes-app

      - name: ✅ Vérification du rollout
        # Attends que les pods soient à jour avant de conclure le déploiement.
        run: |
          kubectl rollout status deployment/backend -n recipes-app --timeout=120s
          kubectl rollout status deployment/frontend -n recipes-app --timeout=120s
